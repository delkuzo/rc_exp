/**
 * –°–∏—Å—Ç–µ–º–∞ –∏–∫–æ–Ω–æ–∫ v3 –¥–ª—è RC Experiment
 * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∫–æ–Ω–æ–∫ –∏–∑ Gravity UI
 */

class IconSystemV3 {
    constructor() {
        this.icons = new Map();
        this.allIcons = [];
        this.categories = new Map();
        this.repoUrl = 'https://raw.githubusercontent.com/gravity-ui/icons/main/svgs/';
        this.init();
    }

    async init() {
        await this.loadAllIcons();
        this.categorizeIcons();
        console.log('üé® –°–∏—Å—Ç–µ–º–∞ –∏–∫–æ–Ω–æ–∫ v3 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    async loadAllIcons() {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–Ω–µ–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –∏–∑ /experiments/*
            const response = await fetch('/icons/all-icons.json');
            this.allIcons = await response.json();
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.allIcons.length} –∏–∫–æ–Ω–æ–∫ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–∫–æ–Ω–æ–∫:', error);
            this.allIcons = [];
        }
    }

    categorizeIcons() {
        this.categories.clear();
        this.allIcons.forEach(icon => {
            if (!this.categories.has(icon.category)) {
                this.categories.set(icon.category, []);
            }
            this.categories.get(icon.category).push(icon);
        });
        console.log(`üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∫–æ–Ω–æ–∫: ${this.categories.size}`);
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –ø–æ –∏–º–µ–Ω–∏ —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
    async getIcon(name) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (this.icons.has(name)) {
            return this.icons.get(name);
        }

        try {
            const response = await fetch(`${this.repoUrl}${name}.svg`);
            if (response.ok) {
                const svgContent = await response.text();
                this.icons.set(name, svgContent);
                console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∏–∫–æ–Ω–∫–∞: ${name}`);
                return svgContent;
            } else {
                console.warn(`‚ö†Ô∏è –ò–∫–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${name}`);
                return null;
            }
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∫–æ–Ω–∫–∏ ${name}:`, error);
            return null;
        }
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∏–∫–æ–Ω–∫–∏ —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
    async renderIcon(name, size = 24, className = '') {
        const svgContent = await this.getIcon(name);
        if (!svgContent) {
            return `<div class="icon-placeholder ${className}" style="width: ${size}px; height: ${size}px; background: #f8f9fa; border: 1px solid #e9ecef; border-radius: 4px; display: flex; align-items: center; justify-content: center; font-size: 10px; color: #6c757d; font-weight: 500;">${name}</div>`;
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º viewBox –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ SVG
        const viewBoxMatch = svgContent.match(/viewBox="([^"]+)"/);
        const viewBox = viewBoxMatch ? viewBoxMatch[1] : "0 0 24 24";
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ SVG (path, rect, circle –∏ —Ç.–¥.)
        const contentMatch = svgContent.match(/<svg[^>]*>([\s\S]*)<\/svg>/);
        if (contentMatch) {
            const svgContentInner = contentMatch[1];
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã fill –∏ stroke
            return `<svg class="icon ${className}" width="${size}" height="${size}" viewBox="${viewBox}">${svgContentInner}</svg>`;
        }

        return svgContent;
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∏–∫–æ–Ω–∫–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    async renderIconOriginal(name, size = 24, className = '') {
        const svgContent = await this.getIcon(name);
        if (!svgContent) {
            return `<div class="icon-placeholder ${className}" style="width: ${size}px; height: ${size}px; background: var(--color-border-secondary); border-radius: 4px; display: flex; align-items: center; justify-content: center; font-size: 12px; color: var(--color-text-secondary);">?</div>`;
        }

        // –ó–∞–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        const modifiedSvg = svgContent
            .replace(/width="[^"]*"/, `width="${size}"`)
            .replace(/height="[^"]*"/, `height="${size}"`)
            .replace(/class="[^"]*"/, `class="icon ${className}"`)
            .replace(/<svg/, `<svg class="icon ${className}"`);

        return modifiedSvg;
    }

    // –ü–æ–∏—Å–∫ –∏–∫–æ–Ω–æ–∫
    searchIcons(query) {
        const searchTerm = query.toLowerCase();
        return this.allIcons.filter(icon => 
            icon.name.toLowerCase().includes(searchTerm) ||
            icon.displayName.toLowerCase().includes(searchTerm) ||
            icon.keywords.some(keyword => keyword.toLowerCase().includes(searchTerm))
        );
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    getIconsByCategory(category) {
        return this.categories.get(category) || [];
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    getCategories() {
        return Array.from(this.categories.keys()).sort();
    }

    // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–∫–æ–Ω–∫–∏
    getPopularIcons() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ –∏–∑ –Ω–∞—à–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
        const availableIcons = [
            { name: 'star', displayName: 'Star' },
            { name: 'heart', displayName: 'Heart' },
            { name: 'plus', displayName: 'Plus' },
            { name: 'minus', displayName: 'Minus' },
            { name: 'check', displayName: 'Check' },
            { name: 'camera', displayName: 'Camera' },
            { name: 'clock', displayName: 'Clock' },
            { name: 'eye', displayName: 'Eye' },
            { name: 'eye-slash', displayName: 'Eye Slash' },
            { name: 'lock', displayName: 'Lock' },
            { name: 'folder', displayName: 'Folder' },
            { name: 'credit-card', displayName: 'Credit Card' }
        ];
        
        return availableIcons.filter(icon => this.allIcons.some(allIcon => allIcon.name === icon.name));
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–µ–º–æ
    async renderIconDemo() {
        const demoContainer = document.getElementById('icons-demo');
        
        if (!demoContainer) {
            console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä icons-demo –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const popularIcons = this.getPopularIcons();
        
        console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∫–æ–Ω–æ–∫:', this.icons.size);
        console.log('–ü–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏–∫–æ–Ω–æ–∫:', popularIcons.length);
        console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–∫–æ–Ω–∫–∏:', Array.from(this.icons.keys()));

        let html = '<div class="icons-grid">';
        
        for (const icon of popularIcons.slice(0, 12)) {
            const iconHtml = await this.renderIcon(icon.name, 24, 'demo-icon');
            html += `
                <div class="icon-item" title="${icon.displayName}">
                    <div class="icon-display">
                        ${iconHtml}
                    </div>
                    <div class="icon-info">
                        <span class="icon-name">${icon.displayName}</span>
                        <span class="icon-code">${icon.name}</span>
                    </div>
                </div>
            `;
        }
        
        html += '</div>';
        html += `
            <div class="icons-info">
                <p><strong>–í—Å–µ–≥–æ –∏–∫–æ–Ω–æ–∫:</strong> ${this.allIcons.length}</p>
                <p><strong>–ó–∞–≥—Ä—É–∂–µ–Ω–æ SVG:</strong> ${this.icons.size}</p>
                <p><strong>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</strong> ${await this.renderIcon('star', 16)} –ò–∫–æ–Ω–∫–∞ –≤ –∫–æ–¥–µ</p>
            </div>
        `;

        demoContainer.innerHTML = html;
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∫–æ–Ω–æ–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    async loadIconsAsync(icons) {
        const promises = icons.map(iconName => this.getIcon(iconName));
        await Promise.all(promises);
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${icons.length} –∏–∫–æ–Ω–æ–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ`);
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∏—Å–∫–∞
    setupSearch() {
        const searchInput = document.getElementById('icon-search');
        if (!searchInput) return;

        const filterIcons = () => {
            const query = searchInput.value;
            const results = this.searchIcons(query);
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
            console.log(`–ù–∞–π–¥–µ–Ω–æ ${results.length} –∏–∫–æ–Ω–æ–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ "${query}"`);
        };

        searchInput.addEventListener('input', filterIcons);
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –∏–∫–æ–Ω–æ–∫ v3
window.iconSystemV3 = new IconSystemV3();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É
window.connectIconV3 = async function(iconName, size = 24) {
    const iconSystem = window.iconSystemV3;
    if (await iconSystem.getIcon(iconName)) {
        return await iconSystem.renderIcon(iconName, size);
    } else {
        console.warn(`–ò–∫–æ–Ω–∫–∞ "${iconName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return iconSystem.renderIcon('question', size); // Fallback –∏–∫–æ–Ω–∫–∞
    }
};

// –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–º–∏: window.createIcon(name, elementId, size?)
// –†–µ–Ω–¥–µ—Ä–∏–º –∏–∫–æ–Ω–∫—É –≤ —ç–ª–µ–º–µ–Ω—Ç –ø–æ id
window.createIcon = async function(iconName, elementId, size = 16) {
    try {
        const target = document.getElementById(elementId);
        if (!target) return;
        const svg = await window.iconSystemV3.renderIcon(iconName, size);
        target.innerHTML = svg;
    } catch (e) {
        console.warn('createIcon: –æ—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∞ –∏–∫–æ–Ω–∫–∏', iconName, e);
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∏–∫–æ–Ω–æ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    console.log('üé® –°–∏—Å—Ç–µ–º–∞ –∏–∫–æ–Ω–æ–∫ v3 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
}); 