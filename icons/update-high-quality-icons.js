/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∫–æ–Ω–æ–∫ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ –∏–∑ Gravity UI
 */

const fs = require('fs');
const path = require('path');
const https = require('https');

class IconUpdater {
    constructor() {
        this.repoUrl = 'https://raw.githubusercontent.com/gravity-ui/icons/main/svgs/';
        this.iconsDir = path.join(__dirname);
        this.updatedCount = 0;
        this.failedCount = 0;
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ HTTPS
    async fetchFile(url) {
        return new Promise((resolve, reject) => {
            https.get(url, (res) => {
                if (res.statusCode !== 200) {
                    reject(new Error(`HTTP ${res.statusCode}: ${res.statusMessage}`));
                    return;
                }

                let data = '';
                res.on('data', (chunk) => {
                    data += chunk;
                });
                res.on('end', () => {
                    resolve(data);
                });
            }).on('error', (err) => {
                reject(err);
            });
        });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö SVG —Ñ–∞–π–ª–æ–≤
    getExistingIcons() {
        const files = fs.readdirSync(this.iconsDir);
        return files
            .filter(file => file.endsWith('.svg'))
            .map(file => file.replace('.svg', ''));
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∏–∫–æ–Ω–∫–∏
    async updateIcon(iconName) {
        try {
            const url = `${this.repoUrl}${iconName}.svg`;
            const svgContent = await this.fetchFile(url);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π SVG
            if (!svgContent.includes('<svg') || !svgContent.includes('</svg>')) {
                throw new Error('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π SVG –∫–æ–Ω—Ç–µ–Ω—Ç');
            }

            const filePath = path.join(this.iconsDir, `${iconName}.svg`);
            fs.writeFileSync(filePath, svgContent);
            
            console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞: ${iconName}`);
            this.updatedCount++;
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${iconName}:`, error.message);
            this.failedCount++;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∫–æ–Ω–æ–∫
    async updateAllIcons() {
        console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫...');
        
        const existingIcons = this.getExistingIcons();
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${existingIcons.length} –∏–∫–æ–Ω–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ –ø–æ –æ–¥–Ω–æ–π —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        for (const iconName of existingIcons) {
            await this.updateIcon(iconName);
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 100));
        }
        
        console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:');
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${this.updatedCount}`);
        console.log(`‚ùå –û—à–∏–±–æ–∫: ${this.failedCount}`);
        console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((this.updatedCount / (this.updatedCount + this.failedCount)) * 100)}%`);
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    createBackup() {
        const backupDir = path.join(this.iconsDir, 'backup_' + new Date().toISOString().slice(0, 19).replace(/:/g, '-'));
        
        if (!fs.existsSync(backupDir)) {
            fs.mkdirSync(backupDir);
        }
        
        const existingIcons = this.getExistingIcons();
        let backupCount = 0;
        
        for (const iconName of existingIcons) {
            const sourcePath = path.join(this.iconsDir, `${iconName}.svg`);
            const backupPath = path.join(backupDir, `${iconName}.svg`);
            
            if (fs.existsSync(sourcePath)) {
                fs.copyFileSync(sourcePath, backupPath);
                backupCount++;
            }
        }
        
        console.log(`üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è ${backupCount} –∏–∫–æ–Ω–æ–∫ –≤ ${backupDir}`);
        return backupDir;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∫–æ–Ω–æ–∫
    checkIconQuality(iconName) {
        const filePath = path.join(this.iconsDir, `${iconName}.svg`);
        
        if (!fs.existsSync(filePath)) {
            return false;
        }
        
        const content = fs.readFileSync(filePath, 'utf8');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ SVG
        const hasViewBox = content.includes('viewBox');
        const hasProperNamespace = content.includes('xmlns="http://www.w3.org/2000/svg"');
        const hasComplexPaths = content.includes('fill-rule') || content.includes('clip-rule');
        const hasProperDimensions = content.includes('width="16"') && content.includes('height="16"');
        
        return hasViewBox && hasProperNamespace && hasComplexPaths && hasProperDimensions;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤—Å–µ—Ö –∏–∫–æ–Ω–æ–∫
    checkAllIconsQuality() {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∫–æ–Ω–æ–∫...');
        
        const existingIcons = this.getExistingIcons();
        let highQualityCount = 0;
        let lowQualityCount = 0;
        
        for (const iconName of existingIcons) {
            if (this.checkIconQuality(iconName)) {
                highQualityCount++;
                console.log(`‚úÖ ${iconName} - –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ`);
            } else {
                lowQualityCount++;
                console.log(`‚ö†Ô∏è ${iconName} - –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ`);
            }
        }
        
        console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:');
        console.log(`‚úÖ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: ${highQualityCount}`);
        console.log(`‚ö†Ô∏è –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: ${lowQualityCount}`);
        console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞: ${Math.round((highQualityCount / (highQualityCount + lowQualityCount)) * 100)}%`);
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    const updater = new IconUpdater();
    
    console.log('üé® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ –¥–æ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞');
    console.log('=' .repeat(50));
    
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    console.log('\nüíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...');
    updater.createBackup();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞...');
    updater.checkAllIconsQuality();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏
    console.log('\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫...');
    await updater.updateAllIcons();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
    updater.checkAllIconsQuality();
    
    console.log('\nüéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    main().catch(console.error);
}

module.exports = IconUpdater; 